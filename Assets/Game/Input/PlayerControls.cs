//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace YooE.Diploma
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerLocomotionMap"",
            ""id"": ""ddc00ee3-8bb3-4607-a7fd-63575c808e65"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5971ec03-36aa-4cd0-9f5e-27fcbefcb226"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""38a0f7b1-ee99-4ef0-a248-587dad3eae13"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerInteractionAbility"",
                    ""type"": ""Button"",
                    ""id"": ""8e1b96cf-2337-4d44-a3eb-b43eb41623aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""21248101-e91c-45d4-a4ad-c162bf7273ae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""886a4154-cca9-4c3f-9b71-1db39cfb478f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""962bc68f-bb71-4597-8a7a-f0fcf5f34c15"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6872a893-0e13-48b1-96e1-ca0ef2932da4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a41bbc5f-338d-4940-afc1-d708d41f0c2b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""523b18be-ca33-4903-9e5a-6198559124b0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0cb4f58c-69a0-4c95-a761-95b526692359"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a3ae9807-4bb4-4d45-ae47-82522e2f349a"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""059bf0e6-96d1-48c4-add4-99f2d00c88e8"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8cbbb6da-8542-45f9-a5fa-0654bd917e30"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""c7e6a1f7-f543-4dc6-acdd-cdf0aa94d96c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5d0c1d53-c0fe-49ba-bacb-d10884809c78"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""35fae025-7fd1-46ff-a659-3098d51f81df"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""44566001-4900-498a-bb8f-89fd4a9fb53f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f1233054-1fe1-4c6f-8da8-084cff310dac"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""513cab58-59bc-4b17-858c-dc25925b6d8b"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a05d5cd7-020b-4b22-8bb3-a0d3bffa0dbc"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db18be52-c058-41ac-8ab0-5c4e8a4dadc9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerInteractionAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86744bfc-4479-4758-94ed-828494cb7f2b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerInteractionAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShooterMap"",
            ""id"": ""e9f2f49c-b132-4ec9-a989-94325c33079b"",
            ""actions"": [
                {
                    ""name"": ""ThirdWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""85608df9-618f-4621-92fe-ae4e47160d27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""174bbd4f-36b9-40ec-a273-66cca6a82776"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""1f92ce15-d0b6-4252-b40f-0d0dd22e9c9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0592357d-41ec-412e-9f71-95079e15e71a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""045aa6fc-1bbf-4bce-9d7b-7032d6d68fb0"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f84ecb93-fd18-4423-af6f-63a06559d053"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThirdWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerLocomotionMap
            m_PlayerLocomotionMap = asset.FindActionMap("PlayerLocomotionMap", throwIfNotFound: true);
            m_PlayerLocomotionMap_Move = m_PlayerLocomotionMap.FindAction("Move", throwIfNotFound: true);
            m_PlayerLocomotionMap_PointerPosition = m_PlayerLocomotionMap.FindAction("PointerPosition", throwIfNotFound: true);
            m_PlayerLocomotionMap_PointerInteractionAbility = m_PlayerLocomotionMap.FindAction("PointerInteractionAbility", throwIfNotFound: true);
            // ShooterMap
            m_ShooterMap = asset.FindActionMap("ShooterMap", throwIfNotFound: true);
            m_ShooterMap_ThirdWeapon = m_ShooterMap.FindAction("ThirdWeapon", throwIfNotFound: true);
            m_ShooterMap_SecondWeapon = m_ShooterMap.FindAction("SecondWeapon", throwIfNotFound: true);
            m_ShooterMap_FirstWeapon = m_ShooterMap.FindAction("FirstWeapon", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerLocomotionMap
        private readonly InputActionMap m_PlayerLocomotionMap;
        private List<IPlayerLocomotionMapActions> m_PlayerLocomotionMapActionsCallbackInterfaces = new List<IPlayerLocomotionMapActions>();
        private readonly InputAction m_PlayerLocomotionMap_Move;
        private readonly InputAction m_PlayerLocomotionMap_PointerPosition;
        private readonly InputAction m_PlayerLocomotionMap_PointerInteractionAbility;
        public struct PlayerLocomotionMapActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerLocomotionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PlayerLocomotionMap_Move;
            public InputAction @PointerPosition => m_Wrapper.m_PlayerLocomotionMap_PointerPosition;
            public InputAction @PointerInteractionAbility => m_Wrapper.m_PlayerLocomotionMap_PointerInteractionAbility;
            public InputActionMap Get() { return m_Wrapper.m_PlayerLocomotionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerLocomotionMapActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerLocomotionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
                @PointerInteractionAbility.started += instance.OnPointerInteractionAbility;
                @PointerInteractionAbility.performed += instance.OnPointerInteractionAbility;
                @PointerInteractionAbility.canceled += instance.OnPointerInteractionAbility;
            }

            private void UnregisterCallbacks(IPlayerLocomotionMapActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @PointerPosition.started -= instance.OnPointerPosition;
                @PointerPosition.performed -= instance.OnPointerPosition;
                @PointerPosition.canceled -= instance.OnPointerPosition;
                @PointerInteractionAbility.started -= instance.OnPointerInteractionAbility;
                @PointerInteractionAbility.performed -= instance.OnPointerInteractionAbility;
                @PointerInteractionAbility.canceled -= instance.OnPointerInteractionAbility;
            }

            public void RemoveCallbacks(IPlayerLocomotionMapActions instance)
            {
                if (m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerLocomotionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerLocomotionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerLocomotionMapActions @PlayerLocomotionMap => new PlayerLocomotionMapActions(this);

        // ShooterMap
        private readonly InputActionMap m_ShooterMap;
        private List<IShooterMapActions> m_ShooterMapActionsCallbackInterfaces = new List<IShooterMapActions>();
        private readonly InputAction m_ShooterMap_ThirdWeapon;
        private readonly InputAction m_ShooterMap_SecondWeapon;
        private readonly InputAction m_ShooterMap_FirstWeapon;
        public struct ShooterMapActions
        {
            private @PlayerControls m_Wrapper;
            public ShooterMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ThirdWeapon => m_Wrapper.m_ShooterMap_ThirdWeapon;
            public InputAction @SecondWeapon => m_Wrapper.m_ShooterMap_SecondWeapon;
            public InputAction @FirstWeapon => m_Wrapper.m_ShooterMap_FirstWeapon;
            public InputActionMap Get() { return m_Wrapper.m_ShooterMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShooterMapActions set) { return set.Get(); }
            public void AddCallbacks(IShooterMapActions instance)
            {
                if (instance == null || m_Wrapper.m_ShooterMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ShooterMapActionsCallbackInterfaces.Add(instance);
                @ThirdWeapon.started += instance.OnThirdWeapon;
                @ThirdWeapon.performed += instance.OnThirdWeapon;
                @ThirdWeapon.canceled += instance.OnThirdWeapon;
                @SecondWeapon.started += instance.OnSecondWeapon;
                @SecondWeapon.performed += instance.OnSecondWeapon;
                @SecondWeapon.canceled += instance.OnSecondWeapon;
                @FirstWeapon.started += instance.OnFirstWeapon;
                @FirstWeapon.performed += instance.OnFirstWeapon;
                @FirstWeapon.canceled += instance.OnFirstWeapon;
            }

            private void UnregisterCallbacks(IShooterMapActions instance)
            {
                @ThirdWeapon.started -= instance.OnThirdWeapon;
                @ThirdWeapon.performed -= instance.OnThirdWeapon;
                @ThirdWeapon.canceled -= instance.OnThirdWeapon;
                @SecondWeapon.started -= instance.OnSecondWeapon;
                @SecondWeapon.performed -= instance.OnSecondWeapon;
                @SecondWeapon.canceled -= instance.OnSecondWeapon;
                @FirstWeapon.started -= instance.OnFirstWeapon;
                @FirstWeapon.performed -= instance.OnFirstWeapon;
                @FirstWeapon.canceled -= instance.OnFirstWeapon;
            }

            public void RemoveCallbacks(IShooterMapActions instance)
            {
                if (m_Wrapper.m_ShooterMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IShooterMapActions instance)
            {
                foreach (var item in m_Wrapper.m_ShooterMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ShooterMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ShooterMapActions @ShooterMap => new ShooterMapActions(this);
        public interface IPlayerLocomotionMapActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnPointerPosition(InputAction.CallbackContext context);
            void OnPointerInteractionAbility(InputAction.CallbackContext context);
        }
        public interface IShooterMapActions
        {
            void OnThirdWeapon(InputAction.CallbackContext context);
            void OnSecondWeapon(InputAction.CallbackContext context);
            void OnFirstWeapon(InputAction.CallbackContext context);
        }
    }
}
